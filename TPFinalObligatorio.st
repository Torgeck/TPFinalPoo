BorderedMorph subclass: #BarraVentana	instanceVariableNames: 'botonCerrar botonMinimizar titulo'	classVariableNames: ''	package: 'TPFinalObligatorio'!!BarraVentana methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/22/2022 18:08'!inicializarConTitulo: unTitulo	"Metodo que crea una barra para las ventanas usando layoutPolicy para posicionar sus elementos"	self		initialize;		borderColor: Color gray ;		color: Color gray.	self layoutPolicy: TableLayout new.	self		listDirection: #rightToLeft;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		wrapDirection: #topToButtom;		layoutInset: 2;		cellInset: 2.	"Se inicializan los botones"	botonCerrar := Boton newWithLabel: 'X'.	botonMinimizar := Boton newWithLabel: '_'.	titulo := self agregarTitulo: unTitulo.	"Le agrego los morphs a la barra"	self addMorph: botonCerrar.	self addMorph: botonMinimizar.	self addMorph: titulo.	"Aniado caracteristicas a los morphs"	botonCerrar		color: self color;		width: botonCerrar height.	botonMinimizar		color: self color;		width: botonCerrar height.	"Aniado funcionalidad a los botones"	botonCerrar mouseAction: [ self owner delete ].	botonMinimizar mouseAction: [ self owner collapse ]! !!BarraVentana methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/18/2022 04:02'!agregarTitulo: unTitulo	| contenedor tituloMorph |	contenedor := Morph new.	contenedor layoutPolicy: TableLayout new.	contenedor		listDirection: #topToBottom;		listCentering: #center;		wrapCentering: #center;		hResizing: #spaceFill;		beTransparent;		vResizing: #shrinkWrap.	tituloMorph := StringMorph new		               contents: unTitulo;		               color: Color white.	contenedor addMorph: tituloMorph.	^ contenedor! !!BarraVentana methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/22/2022 11:50'!inicializar	"Metodo que crea una barra para las ventanas usando layoutPolicy para posicionar sus elementos"	self		initialize;		borderColor: Color transparent;		color: Color gray.	self layoutPolicy: TableLayout new.	self		listDirection: #leftToRight;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		wrapDirection: #topToButtom;		layoutInset: 2;		cellInset: 2.	"Se inicializan los botones"	botonCerrar := Boton newWithLabel: 'X'.	botonMinimizar := Boton newWithLabel: '_'.	"Le agrego los morphs a la barra"	self addMorph: botonMinimizar.	self addMorph: botonCerrar.	"Aniado caracteristicas a los morphs"	botonCerrar		color: self color;		width: botonCerrar height.	botonMinimizar		color: self color;		width: botonCerrar height.	"Aniado funcionalidad a los botones"	botonCerrar mouseAction: [ self owner delete ].	botonMinimizar mouseAction: [ self owner collapse ]! !!BarraVentana methodsFor: 'initialization' stamp: 'Torgeck 12/27/2022 01:36'!setTitulo: unTitulo"Mensaje que setea el titulo de la barraVentana"titulo ! !SimpleButtonMorph subclass: #Boton	instanceVariableNames: 'bloqueAccion mouseAction'	classVariableNames: ''	package: 'TPFinalObligatorio'!!Boton methodsFor: 'accessing' stamp: 'Torgeck 11/22/2022 20:16'!mouseAction: unBloque	^ bloqueAccion := unBloque! !!Boton methodsFor: 'event handling' stamp: 'Torgeck 11/22/2022 20:16'!mouseUp: unEvento	super mouseUp: unEvento.	bloqueAccion value! !Object subclass: #GestorEmpleos	instanceVariableNames: 'colPostulantes colEmpresasSolicitantes colPropuestas diaActual'	classVariableNames: ''	package: 'TPFinalObligatorio'!!GestorEmpleos methodsFor: 'accessing' stamp: 'Torgeck 7/23/2022 17:13'!iniciarDia	"Metodo que simula el pasar de un dia, elimina solicitudes vencidas (tambien las propuestas correspondientes a ellas) y marca las que se vencieron en el dia actual."	| colSolicitudesEliminadas |	colSolicitudesEliminadas := OrderedCollection new.	diaActual := diaActual addDays: 1.		colEmpresasSolicitantes do: [ :unaEmpresa | 		colSolicitudesEliminadas addAll:			unaEmpresa eliminarSolicitudesVencidas.		unaEmpresa marcarSolicitudesVencidas: diaActual ].		colSolicitudesEliminadas do: [ :unaSolicitud | 		colPropuestas removeAllSuchThat: [ :unaPropuesta | 			unaPropuesta tieneSolicitud: unaSolicitud ] ]! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/22/2022 01:10'!getDiaActual^ diaActual ! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Ulises 2/24/2022 03:50'!listarEmpresasSolResueltas^ colEmpresasSolicitantes sorted: [ :emp1 :emp2 | (emp1 getCantidadSolResueltas )> (emp2 getCantidadSolResueltas)  ]! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 17:01'!registrarPostulante: unPostulante	colPostulantes  add: unPostulante ! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/15/2022 02:02'!registrarEmpresaSolicitante: unNombre conRubro: unRubro conTel: unTel conEmail: unEmail|unaEmpresa|unaEmpresa := EmpresaSolicitante crearEmpresa: unNombre conRubro: unRubro conTel: unTel conEmail: unEmail .colEmpresasSolicitantes add: unaEmpresa.! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/23/2022 02:42'!aceptarPropuesta: unaPropuestaAceptada	"Mensaje que acepta y cambia el estado de una propuesta pasada por parametro"	| solicitudPropuesta unaEmpresaSolicitante |	solicitudPropuesta := unaPropuestaAceptada getSolicitud.	"Elimino propuestas que contengan la solicitud aceptada"	colPropuestas := colPropuestas reject: [ :unaPropuesta | 		                 unaPropuesta tieneSolicitud: solicitudPropuesta ].	unaEmpresaSolicitante := self getEmpresaSol: solicitudPropuesta.	unaEmpresaSolicitante marcarResuelta: solicitudPropuesta! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 04:12'!inicializar: unaColEmp conPostulantes: unaColPos conPropuestas: unaColPro conDiaActual: unDiacolPostulantes := unaColPos .colEmpresasSolicitantes := unaColEmp .colPropuestas := unaColPro .diaActual := unDia ! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/22/2022 02:12'!inicializar	Empresa setMaximo: 5000.	Persona setMaximoIndividual: 2000.	Postulante setID_CLASE: 0.	Solicitud setID_ACTUAL: 0.	colPostulantes := OrderedCollection new.	colEmpresasSolicitantes := OrderedCollection new.	colPropuestas := OrderedCollection new.	diaActual := Date today! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Ulises 2/24/2022 03:32'!listarSolicitudesPendientes: unaEmpresa"Lista las solicitudes pendientes de una empresa pasada por parametro"^unaEmpresa getSolicitudesPendientes.! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/19/2022 21:46'!getEmpresaSol: unaSolicitud	| empresa |	empresa := colEmpresasSolicitantes		           detect: [ :unaEmpresa | 		           unaEmpresa tieneSolicitud: unaSolicitud ]		           ifNone: [ nil ].	^ empresa! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/23/2022 02:44'!generarPropuestasPendientes	"Mensaje que genera propuestas para las solicitudes pendientes"	| colSolPendientes colPosiblesPostulantes |	"Se crea la coleccion y se le pasa un bloque para ordenar las solicitudes por fecha. (+antigua a -antigua)"	colSolPendientes := SortedCollection new.	colSolPendientes sortBlock: [ :solA :solB | 		solA getFechaRegistro < solB getFechaRegistro ].	"Aca se obtienen las solicitudes pendientes de la coleccion de empresas"	colSolPendientes addAll:		(colEmpresasSolicitantes flatCollect: [ :unaEmpresa | 			 unaEmpresa getSolicitudesPendientes ]).	"Ahora se empiezan a evaluar y generar las propuestas"	colSolPendientes do: [ :unaSolicitud | 		colPosiblesPostulantes := unaSolicitud obtenerPostulantesValidos:			                          colPostulantes.		colPosiblesPostulantes do: [ :unPostulante | 			(self existePropuesta: unaSolicitud conPostulante: unPostulante) 				ifFalse: [ 					colPropuestas add:						(Propuesta							 crearConSolicitud: unaSolicitud							 conPostulante: unPostulante) ] ] ]! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/23/2022 17:25'!listarSolicitudesPendientesRegistradas: unaFecha	| colSolicitudesPendientes |	colSolicitudesPendientes := SortedCollection new.	colSolicitudesPendientes sort: [ :solA :solB | 		solA getFechaRegistro < solB getFechaRegistro ].	colSolicitudesPendientes addAll:		(colEmpresasSolicitantes flatCollect: [ :unaEmpresa | 			 unaEmpresa getSolicitudesPendientesRegistradas: unaFecha ]).	^ colSolicitudesPendientes! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 16:59'!registrarEmpresaSolicitante: unaEmpresaSolcolEmpresasSolicitantes add: unaEmpresaSol .! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/19/2022 02:46'!existePropuesta: unaSolicitud conPostulante: unPostulante^colPropuestas anySatisfy: [ :unaPropuesta | unaPropuesta esIgual: unaSolicitud conPostulante: unPostulante  ]! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/22/2022 15:13'!getPropuestas^colPropuestas ! !!GestorEmpleos methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/19/2022 02:59'!otraVerGenerarPropuestas"colSolPendientes do: [ :unaSolicitud | 		colPostulantes do: [ :unPostulante | 			(unaSolicitud verificarPostulanteValido: unPostulante) ifTrue: [ 				:unaPropuesta | 				unaPropuesta					crearConSolicitud: unaSolicitud					conPostulante: unPostulante.				colPropuestas					detect: [ :cadaUnaPropuesta | 					cadaUnaPropuesta esIgual: unaPropuesta ]					ifNone: [ colPropuestas add: unaPropuesta ] ] ] ]"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GestorEmpleos class	instanceVariableNames: ''!!GestorEmpleos class methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/12/2022 19:14'!crear	| unGestor |	unGestor := self new inicializar.	^ unGestor! !BorderedMorph subclass: #Menu	instanceVariableNames: 'botonSolicitudes botonEmpresasSolicitantes botonPostulantes botonCerrar'	classVariableNames: ''	package: 'TPFinalObligatorio'!!Menu methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/25/2022 04:27'!inicializarself initialize.self color: Color paleGreen.self position: 500 @ 500.self bounds: (self position extent: 1000 @ 500)."Se le agregan los botones de las opciones"botonSolicitudes := Boton new.botonEmpresasSolicitantes := Boton new.botonPostulantes := Boton new.botonCerrar := Boton new."Le agrego los botones al menu"self addMorph: botonSolicitudes .self addMorph: botonEmpresasSolicitantes .self addMorph: botonPostulantes .self addMorph: botonCerrar."Posiciono los botones"! !BorderedMorph subclass: #MenuBienvenidaMorph	instanceVariableNames: 'botonCargado botonVacio barraVentana texto origen'	classVariableNames: ''	package: 'TPFinalObligatorio'!!MenuBienvenidaMorph methodsFor: 'as yet unclassified' stamp: 'Torgeck 11/30/2022 02:15'!inicializar	"Metodo que inicializa el menu UI de gestor empleos"	self initialize.	self color: Color paleGreen.	self position: 500 @ 500.	self bounds: (self position extent: 200 @ 200).	"Se le da dos opciones y dependiendo cual boton aprete el usuario se crea un gestor pre-cargado o no "	botonCargado := Boton newWithLabel: 'Pre-cargado'.	botonVacio := Boton newWithLabel: 'Vacio'.	barraVentana := BarraVentana new.	texto := StringMorph new.	"Le agrego los morphs a MenuBienvenida"	self addMorph: botonCargado.	self addMorph: botonVacio.	self addMorph: barraVentana.	self addMorph: texto.	"Posiciono los botones dentro del area de MenuBienvenida"	barraVentana inicializarConTitulo: 'Menu Bienvenida'.	origen := self center.	botonCargado position: origen + (self extent * (-0.2 @ 0.2)).	botonVacio position: origen + (self extent * (-0.2 @ -0.1)).	texto position: self topLeft + (self extent * (0.2 @ 0.2)).	barraVentana		position: self topLeft.	"Aniado caracteristicas para los morphs"	texto		contents: 'Iniciar gestor empresa';		color: Color black.	botonVacio width: botonCargado width.	"Aniado funcionalidad a los botones"	botonVacio mouseAction: [ 		Menu			new;			inicializar.		self delete ].	botonCargado mouseAction: [ 		Menu inicializarCargado.		self delete ].	self openInWorld! !Object subclass: #Postulante	instanceVariableNames: 'nombre email telefono idPostulante'	classVariableNames: 'ID'	package: 'TPFinalObligatorio'!!Postulante methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 19:15'!esFraude: unaSolicitud^false! !!Postulante methodsFor: 'as yet unclassified' stamp: 'Ulises 2/20/2022 02:31'!esAptoTrabajo: unCargo"Mensaje que responde false"^false! !!Postulante methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/23/2022 01:55'!esAptoServicio: unServicio conPuntualidad: unaPuntualidad	self subclassResponsibility! !!Postulante methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 12:25'!noSuperaMaximo: unMontoself subclassResponsibility ! !!Postulante methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 14:23'!esCombinada	^ false! !!Postulante methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 14:23'!tieneProducto: productoSolicitado	^ false! !!Postulante methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/15/2022 03:23'!generarId|idGenerado|idGenerado :=  self class getID_CLASE.self class setID_CLASE: idGenerado + 1.^idGenerado .! !!Postulante methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 14:23'!esProlongado ^false! !!Postulante methodsFor: 'as yet unclassified' stamp: 'Ulises 2/20/2022 03:03'!esAptoServicio: unServicioself subclassResponsibility ! !!Postulante methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 04:41'!inicializar: unNombre conEmail: unEmail conTel: unTel	nombre := unNombre.	email := unEmail.	telefono := unTel.	idPostulante := self generarId.! !!Postulante methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 17:06'!getId ^idPostulante ! !!Postulante methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 17:06'!esIgual: unPostulante^idPostulante = unPostulante getId ! !!Postulante methodsFor: 'printing' stamp: 'Torgeck 7/23/2022 00:22'!toString^nombre! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Postulante class	instanceVariableNames: ''!!Postulante class methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/15/2022 03:17'!getID_CLASE ^ID.! !!Postulante class methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/15/2022 03:18'!setID_CLASE: unValor ID:= unValor.! !Postulante subclass: #Empresa	instanceVariableNames: 'rubro rango servicioProvisto puntual colProductos'	classVariableNames: 'MAXIMO'	package: 'TPFinalObligatorio'!!Empresa methodsFor: 'initialization' stamp: 'Torgeck 7/22/2022 22:59'!setRango: unRangorango := unRango ! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/22/2022 02:27'!inicializarUniforme: unNombre conRubro: unRubro conEmail: unEmail conTel: unTel conServ: unServ	"ACA ESTA MAL TENGO QUE USAR EL INICIALIZADOR DE LA CLASE MADRE"	self inicializar: unNombre conEmail: unEmail conTel: unTel.	rubro := unRubro.	puntual := false.	servicioProvisto := unServ.	colProductos := OrderedCollection new.	idPostulante := self generarId.	rango := 1! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Ulises 2/24/2022 03:32'!getSolicitudesPendientes ^nil! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/15/2022 03:30'!inicializar: unNombre conRubro: unRubro conEmail: unEmail conTel: unTel conServ: unServ"ACA ESTA MAL TENGO QUE USAR EL INICIALIZADOR DE LA CLASE MADRE"self inicializar: unNombre  conEmail: unEmail  conTel: unTel.rubro := unRubro .servicioProvisto := unServ.idPostulante := self generarId.rango:= 1.! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 16:39'!inicializarPC: unNombre conRubro: unRubro conEmail: unEmail conTel: unTel conServ: unServ conProductos: unaColProductos	"ACA ESTA MAL TENGO QUE USAR EL INICIALIZADOR DE LA CLASE MADRE"	self inicializar: unNombre conEmail: unEmail conTel: unTel.	rubro := unRubro.	puntual := true.	servicioProvisto := unServ.	colProductos := unaColProductos.	idPostulante := self generarId.	rango := 1! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 13:29'!noSuperaMaximo: unMonto	^ unMonto <= MAXIMO * rango! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/19/2022 01:09'!esCombinada "Mensaje que devuelve true si la empresa es combinada y false si no lo es una empresa combinada tiene una coleccion de productos que ofrece y en este caso su colProductos no esta vacia, caso contrario con las que no son combinadas"^colProductos  isNotEmpty .! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/19/2022 02:43'!tieneProducto: unProducto"Mensaje que retorna true si la empresa combinada posee el producto pasado por parametro y false en caso contrario"^ colProductos anySatisfy:  [ :unProductoColProductos | unProductoColProductos = unProducto ]! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 04:17'!inicializar: unNombre conRubro: unRubro conEmail: unEmail conTel: unTel	"ACA ESTA MAL TENGO QUE USAR EL INICIALIZADOR DE LA CLASE MADRE"	self inicializar: unNombre conEmail: unEmail conTel: unTel.	rubro := unRubro.	servicioProvisto := nil.	idPostulante := self generarId.	rango := 1! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Ulises 2/20/2022 03:05'!esAptoServicio: unServicio^servicioProvisto = unServicio ! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/22/2022 02:28'!inicializarPuntual: unNombre conRubro: unRubro conEmail: unEmail conTel: unTel conServ: unServ	"ACA ESTA MAL TENGO QUE USAR EL INICIALIZADOR DE LA CLASE MADRE"	self inicializar: unNombre conEmail: unEmail conTel: unTel.	rubro := unRubro.	puntual := true.	servicioProvisto := unServ.	colProductos := OrderedCollection new.	idPostulante := self generarId.	rango := 1! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 16:39'!inicializarUC: unNombre conRubro: unRubro conEmail: unEmail conTel: unTel conServ: unServ conProductos: unaColProductos	"ACA ESTA MAL TENGO QUE USAR EL INICIALIZADOR DE LA CLASE MADRE"	self inicializar: unNombre conEmail: unEmail conTel: unTel.	rubro := unRubro.	puntual := false.	servicioProvisto := unServ.	colProductos := unaColProductos.	idPostulante := self generarId.	rango := 1! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/19/2022 01:21'!esAptoServicio: unServicio conPuntualidad: unaPuntualidad"Mensaje que evalua si una empresa es apta para la solicitud de servicio y retorna un boolean como respuesta"^ servicioProvisto = unServicio and: [puntual = unaPuntualidad] .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Empresa class	instanceVariableNames: ''!!Empresa class methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/15/2022 03:30'!crear: unNombre conRubro: unRubro conEmail: unEmail conTel: unTel |unaEmpresa|unaEmpresa:= self new.unaEmpresa inicializar: unNombre conRubro: unRubro conEmail: unEmail conTel: unTel.^unaEmpresa.! !!Empresa class methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/15/2022 03:30'!crear: unNombre conRubro: unRubro conEmail: unEmail conTel: unTel conServicio: unServ|unaEmpresa|unaEmpresa:= self new.unaEmpresa inicializar: unNombre conRubro: unRubro conEmail: unEmail conTel: unTel conServ: unServ.^unaEmpresa.! !!Empresa class methodsFor: 'initialization' stamp: 'Ulises 2/21/2022 12:47'!getMaximo	^MAXIMO ! !!Empresa class methodsFor: 'initialization' stamp: 'Ulises 2/21/2022 12:47'!setMaximo: unValor	MAXIMO := unValor ! !Empresa subclass: #EmpresaSolicitante	instanceVariableNames: 'colSolicitud colSolicitudesResueltas'	classVariableNames: ''	package: 'TPFinalObligatorio'!!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/19/2022 22:27'!esFraude: unaSolicitud"Devuelve true si la empresa solicitante es el mismo postulante y false en caso contrario"	^ colSolicitud anySatisfy: [ :cadaUnaSolicitud | 		  cadaUnaSolicitud esIgual: unaSolicitud ]! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Ulises 2/22/2022 00:31'!marcarSolicitudesVencidas: diaActual	colSolicitud		do: [ :unaSolicitud | 			(unaSolicitud verificarVencimiento: diaActual) ifTrue: [ 				unaSolicitud setEstado: $V ] ]		! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/23/2022 17:55'!getSolicitudesPendientesRegistradas: unaFecha	^ colSolicitud select: [ :unaSolicitud | 		  (unaSolicitud estaRegistradaFecha: unaFecha)  and: (unaSolicitud estaVencida) not  ]! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/22/2022 15:37'!getSolicitudesPendientes	"Metodo que devuelve una coleccion con las solicitudes que no estan vencidas"	|solPendientes|	solPendientes := colSolicitud reject: [ :unaSolicitud | unaSolicitud estaVencida ].	^solPendientes ! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/21/2022 23:02'!registrarSolicitudServPuntual: diaActual conFechaVencimiento: unaFechaV conMonto: unMonto conCaracteristicas: unaCaracteristicas conServicio: unServicio colSolicitud add:( DeServicio crearPuntual: diaActual  conFechaVen: unaFechaV  conMonto: unMonto conCaracteristicas: unaCaracteristicas   conServicio: unServicio)! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/23/2022 03:29'!getSolicitudesVencidas^ colSolicitud select: [ :unaSol | unaSol estaVencida  ]! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/22/2022 02:29'!inicializar: unNombre conRubro: unRubro conEmail: unEmail conTel: unTel conServ: unServ conSolicitud: unaColSol	self		inicializar: unNombre		conRubro: unRubro		conEmail: unEmail		conTel: unTel		conServ: unServ.	colSolicitud := unaColSol.	colSolicitudesResueltas := OrderedCollection new.! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/23/2022 03:10'!marcarResuelta: unaSolicitud	colSolicitud		removeAllSuchThat:  [ :cadaUnaSolicitud | 		cadaUnaSolicitud esIgual: unaSolicitud ].			colSolicitudesResueltas add: (unaSolicitud setEstado: $R)! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/22/2022 00:01'!registrarSolicitudServUniforme: diaActual conFechaVencimiento: unaFechaV conMonto: unMonto conCaracteristicas: unaCaracteristicas conDuracion: unaDuracion conFormaPago: unaForma conServicio: unServicio colSolicitud add:( DeServicio crearUniforme:  diaActual conFechaVen: unaFechaV   conMonto: unMonto conCaracteristicas: unaCaracteristicas  conDuracion: unaDuracion  conFormaPago: unaForma  conServicio: unServicio  )! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Ulises 2/24/2022 03:51'!getCantidadSolResueltas^colSolicitudesResueltas size! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 17:37'!tieneSolicitud: unaSolicitud^ colSolicitud anySatisfy: [ :cadaUnaSolicitud | cadaUnaSolicitud esIgual: unaSolicitud  ]! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 02:26'!revalidarSolicitud: unaSolicitud conCantDias: unaCantDias"Mensaje que revalida una solicitud vencida por la cantidad de dias estipulada por una empresa"unaSolicitud extenderFechaVencimiento: unaCantDias.! !!EmpresaSolicitante methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/23/2022 16:09'!eliminarSolicitudesVencidas	"Elimina las solicitudes vencidas de la coleccion de solitudes y las retorna"	| solicitudesVencidas |	solicitudesVencidas := colSolicitud select: [ :unaSolicitud | 		                       unaSolicitud estaVencida ].	colSolicitud removeAll: solicitudesVencidas.	^ solicitudesVencidas! !Postulante subclass: #Persona	instanceVariableNames: 'apellido colAptitud'	classVariableNames: 'MAXIMO_INDIVIDUAL'	package: 'TPFinalObligatorio'!!Persona methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 14:24'!esProlongado ^true! !!Persona methodsFor: 'as yet unclassified' stamp: 'Ulises 2/20/2022 03:04'!esAptoServicio: unServicio^colAptitud anySatisfy: [ :unaAptitud | unaAptitud = unServicio ]! !!Persona methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 13:31'!noSuperaMaximo: unMonto^ unMonto <= MAXIMO_INDIVIDUAL ! !!Persona methodsFor: 'as yet unclassified' stamp: 'Ulises 2/20/2022 02:34'!esAptoTrabajo: unCargo^ colAptitud anySatisfy: [ :unaAptitud | unaAptitud = unCargo  ]! !!Persona methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/19/2022 01:19'!esAptoServicio: unServicio conPuntualidad: unaPuntualidad^colAptitud anySatisfy: [ :unaAptitud | unaAptitud = unServicio ]! !!Persona methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 04:36'!inicializar: unNombre conEmail: unEmail conTel: unTel conApellido: unApe conAptitud: unaColAptself inicializar: unNombre conEmail: unEmail  conTel: unTel.apellido := unApe .colAptitud := unaColApt .! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Persona class	instanceVariableNames: ''!!Persona class methodsFor: 'initialization' stamp: 'Ulises 2/21/2022 13:32'!getMaximoIndividual^	MAXIMO_INDIVIDUAL ! !!Persona class methodsFor: 'initialization' stamp: 'Ulises 2/21/2022 13:32'!setMaximoIndividual: unValorMAXIMO_INDIVIDUAL := unValor ! !Object subclass: #Propuesta	instanceVariableNames: 'solicitudPropuesta postulantePropuesta'	classVariableNames: ''	package: 'TPFinalObligatorio'!!Propuesta methodsFor: 'printing' stamp: 'Torgeck 7/23/2022 00:21'!toString	^ 'Propuesta con solicitud: ' , solicitudPropuesta toString	  , ' y con postulante: ' , postulantePropuesta toString! !!Propuesta methodsFor: 'accessing' stamp: 'Torgeck 7/23/2022 02:46'!esIgual: unaSolicitud conPostulante: unPostulante	^(solicitudPropuesta esIgual: unaSolicitud) and: [ 		             postulantePropuesta esIgual: unPostulante ].	 ! !!Propuesta methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 17:03'!getPostulante ^postulantePropuesta ! !!Propuesta methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 13:45'!inicializarConSolicitud: unaSolicitud conPostulante: unPostulante solicitudPropuesta := unaSolicitud .postulantePropuesta := unPostulante ! !!Propuesta methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 17:00'!getSolicitud^ solicitudPropuesta ! !!Propuesta methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 17:04'!esIgual: unaPropuesta	^ (solicitudPropuesta esIgual:  unaPropuesta getSolicitud)	  & (postulantePropuesta esIgual: unaPropuesta getPostulante)! !!Propuesta methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/23/2022 02:42'!tieneSolicitud: unaSolicitud	"Mensaje que retorna un boolean dependiendo si la propuesta contiene o no la solicitud mandada por parametro"	^ solicitudPropuesta esIgual: unaSolicitud! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Propuesta class	instanceVariableNames: ''!!Propuesta class methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 13:47'!crearConSolicitud: unaSolicitud conPostulante: unPostulante	| unaPropuesta |	unaPropuesta := self		                new.		unaPropuesta 		             inicializarConSolicitud: unaSolicitud		                conPostulante: unPostulante.	^ unaPropuesta! !Object subclass: #Solicitud	instanceVariableNames: 'idSolicitud fechaRegistro fechaVencimiento monto estado'	classVariableNames: 'ID_ACTUAL'	package: 'TPFinalObligatorio'!!Solicitud methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 17:05'!esIgual: unaSolicitud^idSolicitud = unaSolicitud getId.! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Ulises 2/19/2022 18:08'!getFechaRegistro"retorna la fecha registrada"^fechaRegistro ! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Ulises 2/20/2022 01:43'!verificarPostulanteValido: unPostulante"Metodo polimorfico que verifica que un postulante sea valido para la solicitud a la que se le manda el msj"self subclassResponsibility ! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Ulises 2/24/2022 03:44'!estaRegistradaFecha: unaFecha^ fechaRegistro equals: unaFecha ! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/23/2022 02:29'!inicializar: unaFecha conFechaVen: unaFechaVen conEstado: unEstado conMonto: unMonto	estado := unEstado.	fechaRegistro := unaFecha.	fechaVencimiento := unaFechaVen.	monto := unMonto.	idSolicitud := self generarId ! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/23/2022 02:29'!inicializar: unaFecha conFechaVen: unaFechaVen conMonto: unMonto	estado := $P.	fechaRegistro := unaFecha.	fechaVencimiento := unaFechaVen.	monto := unMonto.	idSolicitud := self generarId .! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 04:42'!generarId	| idGenerado |	idGenerado := self class getID_ACTUAL.	self class setID_ACTUAL: idGenerado + 1.	^ idGenerado! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/23/2022 16:04'!verificarVencimiento: diaActual	"Verifica si la solicitud esta vencida al dia de 'hoy' y retorna un boolean"	^ (fechaVencimiento  subtractDate: diaActual ) <= 0! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 02:29'!extenderFechaVencimiento: unaCantDias"Mensaje que prolonga la fecha de vencimiento de una solicitud y marca su estado como pendiente"fechaVencimiento := fechaVencimiento addDays: unaCantDias.self setEstado: $P.! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Ulises 2/21/2022 17:06'!getId ^idSolicitud ! !!Solicitud methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/23/2022 04:08'!estaVencida	^ estado sameAs:  $V! !!Solicitud methodsFor: 'accessing' stamp: 'Torgeck 7/22/2022 22:53'!obtenerPostulantesValidos: unaColPostulantes 	^ self subclassResponsibility! !!Solicitud methodsFor: 'printing' stamp: 'Torgeck 7/23/2022 00:04'!toString	^ 'ID : ' , idSolicitud asString! !!Solicitud methodsFor: 'initialization' stamp: 'Ulises 2/21/2022 19:06'!setEstado: unaLetraestado := unaLetra ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Solicitud class	instanceVariableNames: ''!!Solicitud class methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 04:42'!getID_ACTUAL^ID_ACTUAL .! !!Solicitud class methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 04:42'!setID_ACTUAL: unID	^ ID_ACTUAL := unID.! !Solicitud subclass: #DeServicio	instanceVariableNames: 'servicio caracteristicas duracion formaPago'	classVariableNames: ''	package: 'TPFinalObligatorio'!!DeServicio methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/18/2022 15:29'!esPuntual "Mensaje que retorna si un servicio es puntual o uniforme"^duracion = 0.! !!DeServicio methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 05:00'!inicializar: unaFecha  conFechaVen: unaFechaVen  conEstado: unEstado  conMonto: unMonto conCaracteristicas: unaCarac conDuracion: unaDuracion conFormaPago: unaForma conServicio: unServicioself inicializar: unaFecha  conFechaVen: unaFechaVen   conEstado: unEstado   conMonto: unMonto .caracteristicas := unaCarac .duracion := unaDuracion.formaPago := unaForma .servicio := unServicio .! !!DeServicio methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 05:36'!inicializarPuntual: unaFecha conFechaVen: unaFechaVen conMonto: unMonto conCaracteristicas: unaCarac conServicio: unServicio	self		inicializar: unaFecha		conFechaVen: unaFechaVen		conMonto: unMonto.	caracteristicas := unaCarac.	duracion := 0.	formaPago := nil.	servicio := unServicio! !!DeServicio methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/22/2022 23:05'!obtenerPostulantesValidos: unaColPostulantes	"Metodo que genera y retorna una coleccion con postulantes aptos para dicha solicitud"	| colValidos puntualidad |	"Obtengo si la solicitud es puntual o no"	puntualidad := self esPuntual.	"Ahora obtengo los postulantes aptos para la solicitud"	colValidos := unaColPostulantes select: [ :unPostulante | 		              self verificarPostulanteValido: unPostulante conPuntualidad: puntualidad ].	^ colValidos! !!DeServicio methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 05:36'!inicializarUniforme: unaFecha conFechaVen: unaFechaVen conMonto: unMonto conCaracteristicas: unaCarac conDuracion: unaDuracion conFormaPago: unaForma conServicio: unServicio	self		inicializar: unaFecha		conFechaVen: unaFechaVen		conMonto: unMonto.	caracteristicas := unaCarac.	duracion := unaDuracion.	formaPago := unaForma.	servicio := unServicio! !!DeServicio methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/22/2022 23:08'!verificarPostulanteValido: unPostulante conPuntualidad: unaPuntualidad	"Mensaje que verifica si un postulante cumple con las condiciones de la solicitud"	| respuesta |	respuesta := false.	(unPostulante esAptoServicio: servicio conPuntualidad: unaPuntualidad) ifTrue: [ 		respuesta := unPostulante noSuperaMaximo: monto ].	^ respuesta! !!DeServicio methodsFor: 'printing' stamp: 'Torgeck 7/23/2022 00:20'!toString	^ super toString , 'Servicio solicitado: ' , servicio	  , ' Forma de pago: ' , ' Caracteristicas: '	  , caracteristicas! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DeServicio class	instanceVariableNames: ''!!DeServicio class methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/21/2022 21:16'!crearPuntual: unaFecha conFechaVen: unaFechaVen conMonto: unMonto conCaracteristicas: unaCarac conServicio: unServicio"Mensaje que crea una instancia de la clase DeServicio puntual"|unaSolicitud|unaSolicitud := self new.^ unaSolicitud inicializarPuntual: unaFecha conFechaVen: unaFechaVen  conMonto: unMonto conCaracteristicas: unaCarac  conServicio: unServicio! !!DeServicio class methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/21/2022 21:20'!crearUniforme: unaFecha conFechaVen: unaFechaVen conMonto: unMonto conCaracteristicas: unaCarac conDuracion: unaDuracion conFormaPago: unaForma conServicio: unServicio"Mensaje que crea una instancia de la clase DeServicio uniforme"|unaSolicitud|unaSolicitud := self new.^ unaSolicitud inicializarUniforme: unaFecha   conFechaVen: unaFechaVen   conMonto: unMonto conCaracteristicas: unaCarac conDuracion: unaDuracion  conFormaPago: unaForma  conServicio: unServicio.  ! !Solicitud subclass: #DeTrabajo	instanceVariableNames: 'descripcion cargo'	classVariableNames: ''	package: 'TPFinalObligatorio'!!DeTrabajo methodsFor: 'printing' stamp: 'Torgeck 7/23/2022 00:03'!toString	^ super toString , ' Cargo: ' , cargo , ' Descripcion: '	  , descripcion! !!DeTrabajo methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 05:35'!inicializar: unaFecha conFechaVen: unaFechaVen  conMonto: unMonto conCargo: unCargo conDescripcion: unaDescripcion	self		inicializar: unaFecha		conFechaVen: unaFechaVen		conMonto: unMonto.	cargo := unCargo.	descripcion := unaDescripcion! !!DeTrabajo methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 05:34'!inicializar: unaFecha conFechaVen: unaFechaVen  conEstado: unEstado conMonto: unMonto conCargo: unCargo conDescripcion: unaDescripcionself inicializar: unaFecha  conFechaVen: unaFechaVen  conEstado: unEstado  conMonto: unMonto .cargo:= unCargo .descripcion := unaDescripcion .! !!DeTrabajo methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/18/2022 15:37'!obtenerPostulantesValidos: unaColPostulantes"Mensaje que obtiene y retorna los postulantes aptos para la solicitud de trabajo"^unaColPostulantes select: [ :unPostulante | unPostulante esAptoTrabajo: cargo ].! !!DeTrabajo methodsFor: 'as yet unclassified' stamp: 'Ulises 2/20/2022 02:30'!verificarPostulanteValido: unPostulante	"Mensaje que responde si el postulante pasado por parametro es apto para el trabajo"^ unPostulante esAptoTrabajo: cargo.! !BorderedMorph subclass: #Ventana	instanceVariableNames: 'barra alto ancho'	classVariableNames: ''	package: 'TPFinalObligatorio'!!Ventana methodsFor: 'initialization' stamp: 'Torgeck 12/27/2022 01:34'!setTitulo: unTitulo"Mensaje que setea el titulo de una ventana"barra setTitulo: unTitulo! !!Ventana methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/22/2022 18:31'!inicializarConAlto: unAlto conAncho: unAncho conTitulo: unTitulo	"Metodo que inicializa una ventana con un alto, ancho y un titulo"	self		initialize;		color: Color paleBuff;		bounds: (self position extent: unAncho @ unAlto);		layoutPolicy: TableLayout new.	self		listDirection: #bottomToTop;		listCentering: #topLeft;		wrapCentering: #topLeft;		layoutInset: 0.	"Se crea e inicializa la barra"	barra := BarraVentana new.	barra inicializarConTitulo: unTitulo.	"Se agrega la barra a la ventana y se procede a abrir la ventana centrada en el world"	self addMorph: barra.	self openCenteredInWorld! !!Ventana methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/14/2022 03:12'!redimensionarBotones: unaColBotones	"Metodo que redimensiona el ancho de todos los botones por el ancho mas grande de la coleccion"	| botonAnchoMax |	botonAnchoMax := unaColBotones detectMax: [ :unBoton | unBoton width ].	unaColBotones do: [ :unBoton | 		unBoton extent: botonAnchoMax width + 10 @ botonAnchoMax height + 5 ]! !!Ventana methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/22/2022 11:44'!inicializarConAlto: unAlto conAncho: unAncho	"Inicializo venta con un ancho y un alto"	self		initialize;		color: Color gray;		"Cambiar mas adelante "bounds:			(self position extent: unAncho @ unAlto);		layoutPolicy: TableLayout new.	self		listDirection: #bottomToTop;		listCentering: #topLeft;		layoutInset: 0.	"Se crea e inicializa la barra"	barra := BarraVentana new.	barra inicializar.	"Se agrega la barra a la ventana y se procede a abrir la ventana centrada en el world"	self addMorph: barra.	self openCenteredInWorld! !!Ventana methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/22/2022 13:36'!crearBotonesUniformes: unosNombresBotones	"Mensaje que crea y retorna una coleccion de botones"	| colBotones |	colBotones := unosNombresBotones collect: [ :unNombre | 		                Boton newWithLabel: unNombre ].	self redimensionarBotones: colBotones.	^colBotones ! !!Ventana methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/22/2022 13:33'!crearBotones: unosNombresBotones"Mensaje que crea y retorna una coleccion de botones"|colBotones|^ colBotones := unosNombresBotones collect: [ :unNombre | Boton newWithLabel: unNombre  ].! !Ventana subclass: #Formulario	instanceVariableNames: 'botonRegistrar botonCancelar'	classVariableNames: ''	package: 'TPFinalObligatorio'!!Formulario methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/27/2022 01:26'!inicializarMorphContenedor	"Mensaje que crea un morph contenedor de otros morphs con layoutPolicy"	| unMorph |	unMorph := Morph new.	^ unMorph		  initialize;		  color: Color paleRed;		  layoutPolicy: TableLayout new;		  layoutInset: 10;		  listDirection: #rightToLeft;		  cellInset: 10;		  hResizing: #spaceFill;		  vResizing: #shrinkWrap! !!Formulario methodsFor: 'as yet unclassified' stamp: 'Torgeck 1/5/2023 20:04'!inicializarConTitulo: unTitulo	"Mensaje que crea y agrega objetos a colecciones del dependiente"	| contenedor |	self inicializarConAlto: 500 conAncho: 300 conTitulo: unTitulo .	self		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	"Inicializo el morph contenedor de los botones"	contenedor := self inicializarMorphContenedor.	"Inicializo los botones de registrar y cancelar"	botonRegistrar := Boton newWithLabel: 'Registrar'.	botonCancelar := Boton newWithLabel: 'Cancelar'.	"Los agrego al morph contenedor"	contenedor addAllMorphs: { 			botonRegistrar.			botonCancelar }.	"Agrego el contenedor a mi"	self addMorph: contenedor! !!Formulario methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/27/2022 01:26'!inicializar	"Mensaje que crea y agrega objetos a colecciones del dependiente"	| contenedor |	self inicializarConAlto: 500 conAncho: 300 conTitulo: 'Formulario'.	self		hResizing: #shrinkWrap;		vResizing: #shrinkWrap.	"Inicializo el morph contenedor de los botones"	contenedor := self inicializarMorphContenedor.	"Inicializo los botones de registrar y cancelar"	botonRegistrar := Boton newWithLabel: 'Registrar'.	botonCancelar := Boton newWithLabel: 'Cancelar'.	"Los agrego al morph contenedor"	contenedor addAllMorphs: { 			botonRegistrar.			botonCancelar }.	"Agrego el contenedor a mi"	self addMorph: contenedor! !Formulario subclass: #FormularioPostulante	instanceVariableNames: 'nombre email telefono'	classVariableNames: ''	package: 'TPFinalObligatorio'!!FormularioPostulante methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/27/2022 01:21'!inicializar"Metodo que inicializa el formulario para un postulante"! !FormularioPostulante subclass: #FormularioEmpresa	instanceVariableNames: 'rubro rango servicioProvisto esPuntual colProductos esSolicitante'	classVariableNames: ''	package: 'TPFinalObligatorio'!FormularioPostulante subclass: #FormularioPersona	instanceVariableNames: 'apellido colAptitud'	classVariableNames: ''	package: 'TPFinalObligatorio'!Ventana subclass: #GestorEmpleosVisual	instanceVariableNames: 'morphTabla morphBotonera botonRegistro botonPropuesta botonListados botonIniciarDia fecha'	classVariableNames: ''	package: 'TPFinalObligatorio'!!GestorEmpleosVisual methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/22/2022 17:56'!inicializarTabla"Hay que ver como se usa en combinacion con FTSimpleDataSource"morphTabla := FTTableMorph new.morphTabla initialize.! !!GestorEmpleosVisual methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/22/2022 18:44'!inicializarBotoneraCon: unaColBot	"Metodo que crea una botonera para la clase GestorEmpleosVisual "	morphBotonera := Morph new.	morphBotonera		initialize;		layoutPolicy: TableLayout new;		listDirection: #topToBottom;		hResizing: #shrinkWrap;		vResizing: #shrinkWrap;		layoutInset: 5;		cellInset: 10;		addAllMorphs: unaColBot! !!GestorEmpleosVisual methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/26/2022 18:00'!crearBotonesUniformes	| colBoton |	botonRegistro := Boton newWithLabel: 'Registrar'.	botonPropuesta := Boton newWithLabel: 'Propuestas'.	botonListados := Boton newWithLabel: 'Generar Listados'.	botonIniciarDia := Boton newWithLabel: 'Iniciar Dia'.	colBoton := OrderedCollection withAll: { 			            botonRegistro.			            botonPropuesta.			            botonListados.			            botonIniciarDia }.	self redimensionarBotones:  colBoton.	^ colBoton! !!GestorEmpleosVisual methodsFor: 'as yet unclassified' stamp: 'Torgeck 12/26/2022 17:00'!inicializar	| colBotones morphContenedor miGestor  |	" Inicializo la ventana con un alto y ancho default "	self		inicializarConAlto: 225		conAncho: 800		conTitulo: 'Gestor Empleos'.	morphContenedor := Morph new.	morphContenedor		initialize;		color: Color paleYellow;		layoutPolicy: TableLayout new;		hResizing: #spaceFill;		vResizing: #shrinkWrap;		listDirection: #leftToRight;		layoutInset: 15;		cellInset: 10.	colBotones := self crearBotonesUniformes.	fecha := StringMorph new.	colBotones insert: fecha before: 4.	"Creo e inicializo los morphs que van a ir dentro de mi morphContenedor"	self inicializarBotoneraCon: colBotones.	self inicializarTabla.	"Agrego los morphs anteriores a mi morphContenedor"	morphContenedor		addMorph: morphBotonera;		addMorph: morphTabla.	"Finalmente agrego el morph contenedor a gestorEmpleoVisual"	self addMorph: morphContenedor	"Solo queda aniadir la funcionalidad de botones/tabla y emprolijar los colores"! !DeServicio subclass: #YProducto	instanceVariableNames: 'productoSolicitado'	classVariableNames: ''	package: 'TPFinalObligatorio'!!YProducto methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/22/2022 23:10'!verificarPostulanteValido: unPostulante conPuntualidad: unaPuntualidad	| respuesta |	respuesta := false.	unPostulante esCombinada ifTrue: [ 		(unPostulante tieneProducto: productoSolicitado) ifTrue: [ 			respuesta := super verificarPostulanteValido: unPostulante conPuntualidad: unaPuntualidad ] ].	^ respuesta! !!YProducto methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 05:32'!inicializarUniforme: unaFecha conFechaVen: unaFechaVen conMonto: unMonto conCaracteristicas: unaCarac conDuracion: unaDuracion conFormaPago: unaForma conServicio: unServicio conProducto: unProducto	self		inicializarUniforme: unaFecha		conFechaVen: unaFechaVen		conMonto: unMonto		conCaracteristicas: unaCarac		conDuracion: unaDuracion		conFormaPago: unaForma		conServicio: unServicio.	productoSolicitado := unProducto! !!YProducto methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 05:28'!inicializarPuntual: unaFecha conFechaVen: unaFechaVen conMonto: unMonto conCaracteristicas: unaCarac   conServicio: unServicio conProducto: unProducto	self		inicializarPuntual: unaFecha		conFechaVen: unaFechaVen		conMonto: unMonto		conCaracteristicas: unaCarac		conServicio: unServicio.	productoSolicitado := unProducto! !!YProducto methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/22/2022 23:15'!obtenerPostulantesValidos: unaColPostulantes 	"Mensaje que obtiene y retorna una coleccion de postulantes validos para la solicitud de servicio combinada"	|unaPuntualidad|		unaPuntualidad := self esPuntual.	^ unaColPostulantes select: [ :unPostulante | 		  unPostulante esCombinada and: [ 			  (unPostulante tieneProducto: productoSolicitado) and: [ 				  self					  verificarPostulanteValido: unPostulante					  conPuntualidad: unaPuntualidad ] ] ]! !!YProducto methodsFor: 'as yet unclassified' stamp: 'Torgeck 7/20/2022 05:22'!inicializar: unaFecha  conFechaVen: unaFechaVen conEstado: unEstado conMonto: unMonto  conCaracteristicas: unaCarac  conDuracion: unaDuracion conFormaPago: unaForma  conServicio: unServicio conProducto: unProductoself inicializar: unaFecha  conFechaVen: unaFechaVen  conEstado: unEstado   conMonto: unMonto  conCaracteristicas: unaCarac  conDuracion: unaDuracion   conFormaPago: unaForma   conServicio: unServicio .productoSolicitado := unProducto .! !!YProducto methodsFor: 'printing' stamp: 'Torgeck 7/23/2022 00:03'!toString	^ super toString , 'Producto solicitado: ' , productoSolicitado! !